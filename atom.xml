<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KevinBai&#39;s Notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.kevinbai.com/"/>
  <updated>2017-11-18T04:05:15.000Z</updated>
  <id>http://www.kevinbai.com/</id>
  
  <author>
    <name>Kevin Bai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python Tutorial 读后感（二）：命名空间和作用域</title>
    <link href="http://www.kevinbai.com/Python-Tutorial-%E8%AF%BB%E5%90%8E%E6%84%9F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://www.kevinbai.com/Python-Tutorial-读后感（二）：命名空间和作用域/</id>
    <published>2017-11-10T15:00:00.000Z</published>
    <updated>2017-11-18T04:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注意：内容基于 Python 3.6</strong></p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><blockquote><p>A namespace is a mapping from names to objects.</p></blockquote><p>命名空间，直译是名称到对象（比如数字、字符串等）的映射，（我的理解是）这些名称构成一个命名空间。<a id="more"></a>一般有三种命名空间</p><ol><li>内置名称（ <code>built-in names</code> ）， Python 语言内置的名称，比如函数名 <code>abs</code> 、 <code>char</code> 和异常名称 <code>BaseException</code> 、 <code>Exception</code> 等等。</li><li>全局名称（ <code>global names</code> ），模块中定义的名称。</li><li>局部名称（ <code>local names</code> ），函数中定义的名称。（类中定义的也是）</li></ol><p>看个例子就清楚了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span>  <span class="comment"># A 是全局名称， object 是内置名称</span></span><br><span class="line">    a = <span class="number">-1</span>  <span class="comment"># a 是局部名称（类中）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print_abs_a 是局部名称（类中）， self 是局部名称（函数中）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_abs_a</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># temp_str 是局部名称（函数中）， abs 是内置名称</span></span><br><span class="line">        temp_str = <span class="string">'%s 的绝对值是 %s'</span> % (self.a, abs(self.a))</span><br><span class="line">        print(temp_str)  <span class="comment"># print 是内置名称</span></span><br><span class="line"></span><br><span class="line">t = A()  <span class="comment"># t 是全局名称</span></span><br></pre></td></tr></table></figure><p>命名空间的生命周期各不相同</p><ol><li>内置命名空间在编译器启动开始建立，直到程序结束</li><li>全局命名空间，在模块文件读入后建立，直到程序结束。</li><li>局部命名空间，在函数被调用后建立，函数退出时结束。递归函数每次调用都会建立不同的命名空间。对于类来说类似，实例化后建立，实例销毁后结束。</li></ol><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote><p>A scope is a textual region of a Python program where a namespace is directly accessible. “Directly accessible” here means that an unqualified reference to a name attempts to find the name in the namespace.</p></blockquote><p>作用域，是 Python 代码中的一段文本区域，在这个区域里能「直接」访问一个命名空间中的名称。所谓「直接」，就是只要给出名称（如 <code>some_name</code> ）就能找到命名空间中的对应的名称，而不需要使用类似 <code>modulename.subname</code> 或是 <code>object.attribute</code> 等这样的方式。</p><p>有四种作用域：</p><ol><li><code>local scope</code> ，最内层，包含 <code>local names</code> ，（搜索名称时）最先被搜索</li><li><code>nonlocal scope</code>, 如果一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 <code>nonlocal</code></li><li><code>global scope</code> ，包含 <code>global names</code></li><li><code>builtin scope</code>, 包含 <code>built-in names</code> ，最后被搜索</li></ol><p>其中，需要强调的是 <code>local scope</code> 和 <code>nonlocal scope</code> 是一个相对的概念。如果一个模块中，函数 A 直接包含了函数 B ， B 又直接包含了函数 C 。如果以 C 中的名称作为参考，那么 C 中的作用域为 <code>local scope</code> ，则 B 中的作用域就为 <code>nonlocal scope</code> 。如果以 B 中的名称作为参考，那么 B 中的作用域是 <code>local scope</code> ， 则 A 中的作用域为 <code>nonlocal</code> 。如果以 A 中的名称作为参考，那么 A 中的作用域是 <code>local scope</code> ，不过要注意，模块中的作用域始终为 <code>global scope</code> ，这时并没有 <code>nonlocal scope</code>。</p><p>对于赋值操作，默认都是操作当前作用域中包含的名称。假设现在在 <code>local scope</code> ，如果要对 <code>nonlocal scope</code> 包含的名称进行赋值，则要用 <code>nonlocal</code> 关键字。如果要对 <code>global scope</code> 中包含的名称赋值要用 <code>global</code> 关键字。需要注意的是，如果在某个作用域内没有对应的名称，则在对应的作用域中会新增。<br>下面的例子可以帮你理解赋值操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 来自 https://docs.python.org/3/tutorial/classes.html#scopes-and-namespaces-example</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope_test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_local</span><span class="params">()</span>:</span></span><br><span class="line">        spam = <span class="string">"local spam"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_nonlocal</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> spam</span><br><span class="line">        spam = <span class="string">"nonlocal spam"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_global</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">global</span> spam</span><br><span class="line">        spam = <span class="string">"global spam"</span></span><br><span class="line"></span><br><span class="line">    spam = <span class="string">"test spam"</span></span><br><span class="line">    do_local()</span><br><span class="line">    print(<span class="string">"After local assignment:"</span>, spam)</span><br><span class="line">    do_nonlocal()</span><br><span class="line">    print(<span class="string">"After nonlocal assignment:"</span>, spam)</span><br><span class="line">    do_global()</span><br><span class="line">    print(<span class="string">"After global assignment:"</span>, spam)</span><br><span class="line"></span><br><span class="line">scope_test()</span><br><span class="line">print(<span class="string">"In global scope:"</span>, spam)</span><br></pre></td></tr></table></figure><p>输出为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">After <span class="built_in">local</span> assignment: <span class="built_in">test</span> spam</span><br><span class="line">After nonlocal assignment: nonlocal spam</span><br><span class="line">After global assignment: nonlocal spam</span><br><span class="line">In global scope: global spam</span><br></pre></td></tr></table></figure></p><p>对应读值操作，都是由内到外进行搜索。即 <code>local scope</code> -&gt; <code>nonlocal scope</code> -&gt; <code>global scope</code> -&gt; <code>builtin scope</code> ，如果都找不到对应的名称，则报错。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">t</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">tt</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(x)</span><br><span class="line"><span class="meta">... </span>    tt()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">4</span>, <span class="keyword">in</span> t</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> tt</span><br><span class="line">NameError: name <span class="string">'x'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><p>如果要读取指定作用域的名称，则可以使用对应的 <code>nonlocal</code> 或 <code>global</code> 关键字，如果对应作用域找不到该名称，则直接报错。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">t</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    x = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">tt</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">global</span> x</span><br><span class="line"><span class="meta">... </span>        print(x)</span><br><span class="line"><span class="meta">... </span>    tt()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">6</span>, <span class="keyword">in</span> t</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">5</span>, <span class="keyword">in</span> tt</span><br><span class="line">NameError: name <span class="string">'x'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><p>当然，如果当前作用域已有同名的名称，就不能使用这 <code>nonlocal</code> 或 <code>global</code> 了，否则会报错。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">t</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    x = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">global</span> x</span><br><span class="line">...</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span></span><br><span class="line">SyntaxError: name <span class="string">'x'</span> <span class="keyword">is</span> assigned to before <span class="keyword">global</span> declaration</span><br></pre></td></tr></table></figure></p><p>同时发现个有趣的地方<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">t</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">tt</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">nonlocal</span> x</span><br><span class="line"><span class="meta">... </span>        print(x)</span><br><span class="line"><span class="meta">... </span>    tt()</span><br><span class="line">...</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span></span><br><span class="line">SyntaxError: no binding <span class="keyword">for</span> <span class="keyword">nonlocal</span> <span class="string">'x'</span> found</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">t</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">tt</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">global</span> x</span><br><span class="line"><span class="meta">... </span>        print(x)</span><br><span class="line"><span class="meta">... </span>    tt()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">5</span>, <span class="keyword">in</span> t</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">4</span>, <span class="keyword">in</span> tt</span><br><span class="line">NameError: name <span class="string">'x'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><p>第一个报的是语法错误，而第二个是运行时报的错误。这说明了一个问题：局部名称的查找是编译时就确定的，而全局名称和内置名称的查找都是在运行时确定的。（这里只是指出来，了解下就行，暂时没必要深入）</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>个人觉得，没必要太在意命名空间和作用域的定义，之所以有命名空间的说法，只是为了引入作用域的概念。<br>我们只需要清楚两个方面的内容：一是，哪个作用域包含哪些名称；二是，相反的，赋值和读值的时候它又是指向哪个作用域，并理解 <code>nonlocal</code> 和 <code>global</code> 的使用。</p><p><strong>个人理解可能比较局限，不当之处还望指正</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;注意：内容基于 Python 3.6&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;命名空间&quot;&gt;&lt;a href=&quot;#命名空间&quot; class=&quot;headerlink&quot; title=&quot;命名空间&quot;&gt;&lt;/a&gt;命名空间&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A namespace is a mapping from names to objects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;命名空间，直译是名称到对象（比如数字、字符串等）的映射，（我的理解是）这些名称构成一个命名空间。
    
    </summary>
    
      <category term="语言学习" scheme="http://www.kevinbai.com/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://www.kevinbai.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python Tutorial 读后感（一）：序列类型以及函数参数类型</title>
    <link href="http://www.kevinbai.com/Python-Tutorial-%E8%AF%BB%E5%90%8E%E6%84%9F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%BA%8F%E5%88%97%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.kevinbai.com/Python-Tutorial-读后感（一）：序列类型以及函数参数类型/</id>
    <published>2017-11-07T15:00:00.000Z</published>
    <updated>2017-11-18T04:01:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我学习上有个不好的习惯，每次碰到一个新的技术，总是漫天找教程，找出几份还要对比下哪个比较好，然后才打算看。有时候找着找着半天时间过去了，对要学的新东西却还没开始接触，仿佛找资源倒成了目的一样。这样浪费了大把时间，找出来的很多时候还只看一点点。而且，其实基础教程都差不多，大可不必这样。<a id="more"></a><br>现在，索性直接看官方文档，虽说英语不怎么好，但是长痛不如短痛，反正以后都要接触的。我从 Python Tutorial 部分切入，有时会有一些新的理解，想找个地方记录一下，所以就有了这个系列的文章。<br>好了，不说废话了，进入正题。</p><p><strong>注意：内容基于 Python 3.6.3</strong></p><h3 id="序列类型（-Sequence-Type-）"><a href="#序列类型（-Sequence-Type-）" class="headerlink" title="序列类型（ Sequence Type ）"></a>序列类型（ <code>Sequence Type</code> ）</h3><p>我们先来看个例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y, z = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>上面的操作叫做「多重赋值」，其实，只要是「序列类型」的，都可以有这种操作。<br>序列类型包括这几种： 列表（ <code>list</code> ）、元组（ <code>tuple</code> ）、 <code>range</code> 、 <code>str</code>、 <code>binary sequence type</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  <span class="comment"># 列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)  <span class="comment"># 元祖</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">1</span>, <span class="number">4</span>)  <span class="comment"># range</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'text string: 文本字符串'</span>  <span class="comment"># str</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'abc'</span>  <span class="comment"># byte ( binary sequence type 的一种，这里了解就行)</span></span><br></pre></td></tr></table></figure></p><p>所以，我们后面看到下面的用法就不奇怪了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = <span class="string">'你好'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="string">'你'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="string">'好'</span></span><br></pre></td></tr></table></figure></p><p>这个也好理解<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span> &gt; <span class="string">'aac'</span>  <span class="comment"># 字典序比较</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>] &gt; [<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>]  <span class="comment"># 同上</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>当然，「序列类型」还有很多类似的操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  <span class="comment"># x in s</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">in</span> <span class="string">'abc'</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>] * <span class="number">5</span>  <span class="comment"># s * n</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> * <span class="number">3</span></span><br><span class="line"><span class="string">'aaa'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># len(s)</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'abc'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 等等</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="函数参数类型"><a href="#函数参数类型" class="headerlink" title="函数参数类型"></a>函数参数类型</h3><p>共有三种：位置参数（ <code>Positional Arguments</code> ）、可变参数（ <code>Arbitrary Arguments</code> ）、关键字参数（ <code>Keyword Arguments</code> ）<br>先有个整体的认识。函数定义如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">introduce</span><span class="params">(name, *hobbies, **extra_info)</span>:</span></span><br><span class="line">    print(<span class="string">'Name:'</span>)</span><br><span class="line">    print(name)</span><br><span class="line">    print(<span class="string">'Hobbies:'</span>)</span><br><span class="line">    <span class="keyword">for</span> hobby <span class="keyword">in</span> hobbies:</span><br><span class="line">        print(hobby)</span><br><span class="line">    print(<span class="string">'Extra info:'</span>)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> extra_info:</span><br><span class="line">        print(key, <span class="string">':'</span>, extra_info[key])</span><br></pre></td></tr></table></figure></p><p>调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">introduce(<span class="string">'xiaoming'</span>,</span><br><span class="line">          <span class="string">'movie'</span>, <span class="string">'game'</span>,</span><br><span class="line">          age=<span class="number">22</span>, address=<span class="string">'cn'</span>)</span><br></pre></td></tr></table></figure></p><p>输出如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Name:</span><br><span class="line">xiaoming</span><br><span class="line">Hobbies:</span><br><span class="line">movie</span><br><span class="line">game</span><br><span class="line">Extra info:</span><br><span class="line">age : 22</span><br><span class="line">address : cn</span><br></pre></td></tr></table></figure></p><p>其中， <code>name</code> 为「位置参数」， <code>*hobbies</code> 为「可变参数」， <code>**extra_info</code>为「关键字参数」<br>「位置参数」是指函数调用时根据参数位置进行赋值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(arg1, arg2)</span>:</span>  <span class="comment"># arg1 ， arg2 为「位置参数」</span></span><br><span class="line"><span class="meta">... </span>    print(arg1, arg2)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 实参 1 对应形参 arg1 ，所以 arg1 = 1 。arg2 类似</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>)  <span class="comment"># 少参数会报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: f() missing <span class="number">1</span> required positional argument: <span class="string">'arg2'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 多参数也会报错</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: f() takes <span class="number">2</span> positional arguments but <span class="number">3</span> were given</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 但这可以通过设置参数默认值解决</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(arg1, arg2=<span class="number">2</span>, arg3=<span class="number">3</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(arg1, arg2, arg3)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>「可变参数」，个人理解就是用来解决不确定参数的问题的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_join</span><span class="params">(sep, *args)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> sep.join(args)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_join(<span class="string">', '</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>)</span><br><span class="line"><span class="string">'apple, pear'</span></span><br></pre></td></tr></table></figure></p><p><code>args</code> 是一个元组，函数调用时，除掉「位置参数」用掉的参数，剩下的都会按顺序放到这个元组。</p><p>「关键字参数」是指以 <code>keyword=value</code> 形式定义的参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(name, age=<span class="number">22</span>, address=<span class="string">'cn'</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'name:'</span>, name)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'age:'</span>, age)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'address:'</span>, address)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="string">'xiaoming'</span>)  <span class="comment"># 只传一个参数</span></span><br><span class="line">name: xiaoming</span><br><span class="line">age: <span class="number">22</span></span><br><span class="line">address: cn</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="string">'xm'</span>, age=<span class="number">23</span>, address=<span class="string">'us'</span>)  <span class="comment"># 两个都传</span></span><br><span class="line">name: xm</span><br><span class="line">age: <span class="number">23</span></span><br><span class="line">address: us</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="string">'xm'</span>, address=<span class="string">'us'</span>, age=<span class="number">23</span>)  <span class="comment"># 顺序可以随意</span></span><br><span class="line">name: xm</span><br><span class="line">age: <span class="number">23</span></span><br><span class="line">address: us</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="string">'xm'</span>, age=<span class="number">23</span>, address=<span class="string">'us'</span>,  height=<span class="string">'175cm'</span>)  <span class="comment"># 多了会出问题</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: f() got an unexpected keyword argument <span class="string">'height'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 但可以这样解决</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(name, age=<span class="number">22</span>, address=<span class="string">'cn'</span>, **extra_info)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'name:'</span>, name)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'age:'</span>, age)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'address:'</span>, address)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'extra_info:'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> kw <span class="keyword">in</span> extra_info:</span><br><span class="line"><span class="meta">... </span>            print(kw, <span class="string">':'</span>, extra_info[kw])</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="string">'xm'</span>, age=<span class="number">23</span>, address=<span class="string">'us'</span>,  height=<span class="string">'175cm'</span>)  <span class="comment"># 搞定</span></span><br><span class="line">name: xm</span><br><span class="line">age: <span class="number">23</span></span><br><span class="line">address: us</span><br><span class="line">extra_info:</span><br><span class="line">height : <span class="number">175</span>cm</span><br></pre></td></tr></table></figure></p><p><code>extra_info</code> 是一个字典，由与前面参数对应不上的「关键字参数」组成。</p><p>相信很多朋友看到这，都有点疑惑，这「位置参数」和「关键字参数」怎么区分呢？我的理解是不用区分。理由如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(name, age=<span class="number">22</span>, address=<span class="string">'cn'</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'name:'</span>, name)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'age:'</span>, age)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'address:'</span>, address)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()  <span class="comment"># 不传参会报错， name 像是一个「位置参数」</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: f() missing <span class="number">1</span> required positional argument: <span class="string">'name'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(age=<span class="number">23</span>, address=<span class="string">'us'</span>, name=<span class="string">'xm'</span>)  <span class="comment"># name 当作「关键字参数」也没问题</span></span><br><span class="line">name: xm</span><br><span class="line">age: <span class="number">23</span></span><br><span class="line">address: us</span><br></pre></td></tr></table></figure></p><p>「位置参数」和「关键字参数」是一个相对的概念，不用去死磕。有的把三个参数都当作「位置参数」，有的把三个参数都当作「关键字参数」，有的把第一个当作「位置参数」，后面两个当作「关键字参数」。理解上其实都没问题，我们只要明白在各种情况下如何使用就好。（不过我个人倾向于最后一种理解）</p><p>另外需要注意下相关的两个操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(arg1, arg2, arg3)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(arg1, arg2, arg3)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># *s 相当于 s 中的元素解包，然后按顺序放到参数列表（ s 可以是「序列类型」中的一种）</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(*[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])  <span class="comment"># 等同 f(1, 2, 3)</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># **d 相当于把 d 中的键值对解包，然后放到参数列表 ( d 可以是「字典」)</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(**&#123;<span class="string">'arg1'</span>: <span class="number">2</span>, <span class="string">'arg2'</span>: <span class="number">4</span>, <span class="string">'arg3'</span>: <span class="number">6</span>&#125;) <span class="comment"># 等同 f(arg1=2, arg2=4, arg3=6)</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span></span><br></pre></td></tr></table></figure></p><p>最后来个总结，放出本小节的第一个函数定义<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">introduce</span><span class="params">(name, *hobbies, **extra_info)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>当「位置参数」、「可变参数」和「关键字参数」同时存在时，「可变参数」在「关键字参数」之前，「位置参数」在最前。「位置参数」和「关键字参数」没必要强行去区分，有自己的合理理解即可。还有就是理解函数调用时， <code>*</code> 可以用于解包「列表」（或其它「序列类型」）， <code>**</code> 可以用于解包「字典」。</p><p><strong>个人理解可能比较局限，不当之处还望指正</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;我学习上有个不好的习惯，每次碰到一个新的技术，总是漫天找教程，找出几份还要对比下哪个比较好，然后才打算看。有时候找着找着半天时间过去了，对要学的新东西却还没开始接触，仿佛找资源倒成了目的一样。这样浪费了大把时间，找出来的很多时候还只看一点点。而且，其实基础教程都差不多，大可不必这样。
    
    </summary>
    
      <category term="语言学习" scheme="http://www.kevinbai.com/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
</feed>
